/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : XLS
 #	author : miyako
 #	2013/04/02
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "xlslib.h"

std::mutex globalMutex;

using namespace xlslib_core;

std::map<uint32_t, xlslib_core::workbook*> _workbooks;
std::map<uint32_t, xlslib_core::worksheet*> _worksheets;
std::map<uint32_t, xlslib_core::range*> _ranges;
std::map<uint32_t, xlslib_core::font_t*> _fonts;
std::map<uint32_t, xlslib_core::xf_t*> _formats;
std::map<uint32_t, xlslib_core::cell_t*> _cells;
std::map<uint32_t, xlslib_core::expression_node_t*> _nodes;

// --- Workbook

void _workbookCreate(C_LONGINT &index){

	std::lock_guard<std::mutex> lock(globalMutex);
	
	//as long as we do this (and delete) we should statically link on windows 
	workbook *w = new workbook;

	unsigned int i = 1;
	
	while (_workbooks.find(i) != _workbooks.end()) {
		i++;
	}
	
	_workbooks.insert(std::map<uint32_t, xlslib_core::workbook*>::value_type(i, w));
	
	index.setIntValue(i);
}

void _workbookDelete(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	workbook *w = NULL;
	
	std::map<uint32_t, xlslib_core::workbook*>::iterator pos = _workbooks.find(index.getIntValue());
	
	if(pos != _workbooks.end()) {
		w = pos->second;

		delete w;

		_workbooks.erase(pos);
	}
	
}

workbook *_workbookGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	workbook *w = NULL;
	
	std::map<uint32_t, xlslib_core::workbook*>::iterator pos = _workbooks.find(index.getIntValue());
	
	if(pos != _workbooks.end()) {
		w = pos->second;
	}
	
	return w;
}

#pragma mark -

// --- Worksheet

worksheet *_worksheetCreate(workbook *w, C_TEXT &name, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	worksheet *s = NULL;
	
	if(w){
		
		unsigned int i = 1;
		
		while (_worksheets.find(i) != _worksheets.end()) {
			i++;
		}
		
		CUTF8String n;
		name.copyUTF8String(&n);
		
		s = w->sheet((const char *)n.c_str());
		
		if(s){
			s->defaultColwidth(8);
			_worksheets.insert(std::map<uint32_t, xlslib_core::worksheet*>::value_type(i, s));
			index.setIntValue(i);	
		}		
		
	}
	
	return s;
}

worksheet *_worksheetGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	worksheet *s = NULL;
	
	std::map<uint32_t, xlslib_core::worksheet*>::iterator pos = _worksheets.find(index.getIntValue());
	
	if(pos != _worksheets.end()) {
		s = pos->second;
	}
	
	return s;
}

bool _worksheetRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;		
	
	std::map<uint32_t, xlslib_core::worksheet*>::iterator pos = _worksheets.find(index.getIntValue());
	
	if(pos != _worksheets.end()) {
		_worksheets.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

// --- Format

xf_t *_formatCreate(workbook *w, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	xf_t *f = NULL;
	
	if(w){
		
		unsigned int i = 1;
		
		while (_formats.find(i) != _formats.end()) {
			i++;
		}
		
		f = w->xformat();
		
		if(f){
			_formats.insert(std::map<uint32_t, xlslib_core::xf_t*>::value_type(i, f));	
			index.setIntValue(i);
		}		
		
	}
	
	return f;	
	
}

xf_t *_formatGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	xf_t *f = NULL;
	
	std::map<uint32_t, xlslib_core::xf_t*>::iterator pos = _formats.find(index.getIntValue());
	
	if(pos != _formats.end()) {
		f = pos->second;
	}
	
	return f;
}

bool _formatRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;		
	
	std::map<uint32_t, xlslib_core::xf_t*>::iterator pos = _formats.find(index.getIntValue());
	
	if(pos != _formats.end()) {
		_formats.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

// --- Font

font_t *_fontCreate(workbook *w, C_TEXT &name, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	font_t *f = NULL;
	
	if(w){
		
		CUTF8String s;
		name.copyUTF8String(&s);
		
		std::string n = std::string((char *)s.c_str());	
		
	//	if(CGlobalRecords::IsASCII(n)){
			
			unsigned int i = 1;
			
			while (_fonts.find(i) != _fonts.end()) {
				i++;
			}
			
			f = w->font(n);
			
			if(f){
				
				_fonts.insert(std::map<uint32_t, xlslib_core::font_t*>::value_type(i, f));	
				index.setIntValue(i);
				
			}
			
	//	}
	
	}
	
	return f;	
	
}

font_t *_fontGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	font_t *f = NULL;
	
	std::map<uint32_t, xlslib_core::font_t*>::iterator pos = _fonts.find(index.getIntValue());
	
	if(pos != _fonts.end()) {
		f = pos->second;
	}
	
	return f;
}

bool _fontRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;	
	
	std::map<uint32_t, xlslib_core::font_t*>::iterator pos = _fonts.find(index.getIntValue());
	
	if(pos != _fonts.end()) {
		_fonts.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

// --- Cell

void _cellMap(cell_t *c, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	unsigned int i = 1;
	
	while (_cells.find(i) != _cells.end()) {
		i++;
	}
	
	if(c){
		
		_cells.insert(std::map<uint32_t, xlslib_core::cell_t*>::value_type(i, c));	
		index.setIntValue(i);	
	}
	
}

cell_t *_cellGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	cell_t *c = NULL;
	
	std::map<uint32_t, xlslib_core::cell_t*>::iterator pos = _cells.find(index.getIntValue());
	
	if(pos != _cells.end()) {
		c = pos->second;
	}
	
	return c;
}

bool _cellRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;
	
	std::map<uint32_t, xlslib_core::cell_t*>::iterator pos = _cells.find(index.getIntValue());
	
	if(pos != _cells.end()){ 
		_cells.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

// --- Range

void _rangeMap(range *r, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	unsigned int i = 1;
	
	while (_ranges.find(i) != _ranges.end()) {
		i++;
	}
	
	if(r){
		
		_ranges.insert(std::map<uint32_t, xlslib_core::range*>::value_type(i, r));	
		index.setIntValue(i);
	
	}		
	
}

range *_rangeGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	range *r = NULL;
	
	std::map<uint32_t, xlslib_core::range*>::iterator pos = _ranges.find(index.getIntValue());
	
	if(pos != _ranges.end()) {
		r = pos->second;
	}
	
	return r;
}

bool _rangeRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;	
	
	std::map<uint32_t, xlslib_core::range*>::iterator pos = _ranges.find(index.getIntValue());
	
	if(pos != _ranges.end()) {
		_ranges.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

// --- Formula

void _nodeMap(expression_node_t *n, C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	unsigned int i = 1;
	
	while (_nodes.find(i) != _nodes.end()) {
		i++;
	}
	
	if(n){
		
		_nodes.insert(std::map<uint32_t, xlslib_core::expression_node_t*>::value_type(i, n));	
		index.setIntValue(i);
	
	}		
	
}

expression_node_t *_nodeGet(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	expression_node_t *n = NULL;
	
	std::map<uint32_t, xlslib_core::expression_node_t*>::iterator pos = _nodes.find(index.getIntValue());
	
	if(pos != _nodes.end()) {
		n = pos->second;
	}
	
	return n;
}

bool _nodeRelease(C_LONGINT &index){
	
	std::lock_guard<std::mutex> lock(globalMutex);
	
	bool success = false;	
	
	std::map<uint32_t, xlslib_core::expression_node_t*>::iterator pos = _nodes.find(index.getIntValue());
	
	if(pos != _nodes.end()) {
		_nodes.erase(pos);
		success = true;
	}
	
	return success;
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			
			// --- Workbook
			
		case 1 :
			XLS_WORKBOOK_Create_format(pResult, pParams);
			break;
			
		case 2 :
			XLS_WORKBOOK_Create_font(pResult, pParams);
			break;
			
		case 3 :
			XLS_WORKBOOK_Save_document(pResult, pParams);
			break;
			
		case 4 :
			XLS_WORKBOOK_CLEAR(pResult, pParams);
			break;
			
		case 5 :
			XLS_WORKBOOK_Create(pResult, pParams);
			break;
			
		case 6 :
			XLS_WORKBOOK_Create_sheet(pResult, pParams);
			break;
			
		case 7 :
			XLS_WORKBOOK_Create_fn0_node(pResult, pParams);
			break;
			
		case 8 :
			XLS_WORKBOOK_Create_area_node(pResult, pParams);
			break;
			
		case 9 :
			XLS_WORKBOOK_Create_cell_node(pResult, pParams);
			break;
			
		case 10 :
			XLS_WORKBOOK_Create_fn1_node(pResult, pParams);
			break;
			
		case 11 :
			XLS_WORKBOOK_Create_fn2_node(pResult, pParams);
			break;
			
			// --- Worksheet
			
		case 12 :
			XLS_WORKSHEET_Set_cell_real(pResult, pParams);
			break;
			
		case 13 :
			XLS_WORKSHEET_Set_cell_text(pResult, pParams);
			break;
			
		case 14 :
			XLS_WORKSHEET_SET_ROW_HEIGHT(pResult, pParams);
			break;
			
		case 15 :
			XLS_WORKSHEET_SET_COL_WIDTH(pResult, pParams);
			break;
			
		case 16 :
			XLS_WORKSHEET_MERGE_CELLS(pResult, pParams);
			break;
			
		case 17 :
			XLS_WORKSHEET_Get_cell_range(pResult, pParams);
			break;
			
		case 18 :
			XLS_WORKSHEET_Get_cell(pResult, pParams);
			break;
			
		case 19 :
			XLS_WORKSHEET_Set_cell_bool(pResult, pParams);
			break;
			
		case 20 :
			XLS_WORKSHEET_Set_cell_note(pResult, pParams);
			break;
			
		case 21 :
			XLS_WORKSHEET_Set_cell_link(pResult, pParams);
			break;
			
		case 22 :
			XLS_WORKSHEET_Set_cell_fn(pResult, pParams);
			break;
			
		case 23 :
			XLS_WORKSHEET_RELEASE(pResult, pParams);
			break;
			
			// --- Cell
			
		case 24 :
			XLS_CELL_SET_FONT(pResult, pParams);
			break;
			
		case 25 :
			XLS_CELL_SET_FORMAT(pResult, pParams);
			break;
			
		case 26 :
			XLS_CELL_Get_row(pResult, pParams);
			break;
			
		case 27 :
			XLS_CELL_Get_col(pResult, pParams);
			break;
			
		case 28 :
			XLS_CELL_SET_NUMERIC_FORMAT(pResult, pParams);
			break;
			
		case 29 :
			XLS_CELL_Get_format(pResult, pParams);
			break;
			
		case 30 :
			XLS_CELL_SET_ITALIC(pResult, pParams);
			break;
			
		case 31 :
			XLS_CELL_SET_STRIKEOUT(pResult, pParams);
			break;
			
		case 32 :
			XLS_CELL_SET_SHADOW(pResult, pParams);
			break;
			
		case 33 :
			XLS_CELL_SET_SCRIPT_STYLE(pResult, pParams);
			break;
			
		case 34 :
			XLS_CELL_SET_UNDERLINE_STYLE(pResult, pParams);
			break;
			
		case 35 :
			XLS_CELL_SET_BOLDNESS(pResult, pParams);
			break;
			
		case 36 :
			XLS_CELL_SET_FONT_HEIGHT(pResult, pParams);
			break;
			
		case 37 :
			XLS_CELL_SET_FONT_NAME(pResult, pParams);
			break;
			
		case 38 :
			XLS_CELL_SET_HIDDEN(pResult, pParams);
			break;
			
		case 39 :
			XLS_CELL_SET_LOCKED(pResult, pParams);
			break;
			
		case 40 :
			XLS_CELL_SET_BORDER_STYLE(pResult, pParams);
			break;
			
		case 41 :
			XLS_CELL_SET_WRAP(pResult, pParams);
			break;
			
		case 42 :
			XLS_CELL_SET_HALIGN(pResult, pParams);
			break;
			
		case 43 :
			XLS_CELL_SET_VALIGN(pResult, pParams);
			break;
			
		case 44 :
			XLS_CELL_SET_ORIENTATION(pResult, pParams);
			break;
			
		case 45 :
			XLS_CELL_SET_COLOR(pResult, pParams);
			break;
			
		case 46 :
			XLS_CELL_SET_FILL_STYLE(pResult, pParams);
			break;
			
		case 47 :
			XLS_CELL_SET_BORDER_COLOR(pResult, pParams);
			break;
			
		case 48 :
			XLS_CELL_RELEASE(pResult, pParams);
			break;
			
			// --- Range
			
		case 49 :
			XLS_RANGE_SET_FONT(pResult, pParams);
			break;
			
		case 50 :
			XLS_RANGE_SET_NUMERIC_FORMAT(pResult, pParams);
			break;
			
		case 51 :
			XLS_RANGE_SET_ITALIC(pResult, pParams);
			break;
			
		case 52 :
			XLS_RANGE_SET_STRIKEOUT(pResult, pParams);
			break;
			
		case 53 :
			XLS_RANGE_SET_SHADOW(pResult, pParams);
			break;
			
		case 54 :
			XLS_RANGE_SET_SCRIPT_STYLE(pResult, pParams);
			break;
			
		case 55 :
			XLS_RANGE_SET_UNDERLINE_STYLE(pResult, pParams);
			break;
			
		case 56 :
			XLS_RANGE_SET_BOLDNESS(pResult, pParams);
			break;
			
		case 57 :
			XLS_RANGE_SET_FONT_HEIGHT(pResult, pParams);
			break;
			
		case 58 :
			XLS_RANGE_SET_FONT_NAME(pResult, pParams);
			break;
			
		case 59 :
			XLS_RANGE_SET_HIDDEN(pResult, pParams);
			break;
			
		case 60 :
			XLS_RANGE_SET_LOCKED(pResult, pParams);
			break;
			
		case 61 :
			XLS_RANGE_SET_BORDER_STYLE(pResult, pParams);
			break;
			
		case 62 :
			XLS_RANGE_SET_WRAP(pResult, pParams);
			break;
			
		case 63 :
			XLS_RANGE_SET_HALIGN(pResult, pParams);
			break;
			
		case 64 :
			XLS_RANGE_SET_VALIGN(pResult, pParams);
			break;
			
		case 65 :
			XLS_RANGE_SET_ORIENTATION(pResult, pParams);
			break;
			
		case 66 :
			XLS_RANGE_SET_COLOR(pResult, pParams);
			break;
			
		case 67 :
			XLS_RANGE_SET_FILL_STYLE(pResult, pParams);
			break;
			
		case 68 :
			XLS_RANGE_SET_BORDER_COLOR(pResult, pParams);
			break;
			
		case 69 :
			XLS_RANGE_RELEASE(pResult, pParams);
			break;
			
			// --- Font
			
		case 70 :
			XLS_FONT_SET_NAME(pResult, pParams);
			break;
			
		case 71 :
			XLS_FONT_SET_HEIGHT(pResult, pParams);
			break;
			
		case 72 :
			XLS_FONT_SET_BOLDNESS(pResult, pParams);
			break;
			
		case 73 :
			XLS_FONT_SET_UNDERLINE(pResult, pParams);
			break;
			
		case 74 :
			XLS_FONT_SET_SCRIPT_STYLE(pResult, pParams);
			break;
			
		case 75 :
			XLS_FONT_SET_COLOR(pResult, pParams);
			break;
			
		case 76 :
			XLS_FONT_SET_STRIKEOUT(pResult, pParams);
			break;
			
		case 77 :
			XLS_FONT_SET_SHADOW(pResult, pParams);
			break;
			
		case 78 :
			XLS_FONT_Get_name(pResult, pParams);
			break;
			
		case 79 :
			XLS_FONT_Get_height(pResult, pParams);
			break;
			
		case 80 :
			XLS_FONT_Get_boldness(pResult, pParams);
			break;
			
		case 81 :
			XLS_FONT_Get_underline(pResult, pParams);
			break;
			
		case 82 :
			XLS_FONT_Get_script_style(pResult, pParams);
			break;
			
		case 83 :
			XLS_FONT_Get_color_id(pResult, pParams);
			break;
			
		case 84 :
			XLS_FONT_Get_strikeout(pResult, pParams);
			break;
			
		case 85 :
			XLS_FONT_Get_shadow(pResult, pParams);
			break;
			
		case 86 :
			XLS_FONT_SET_ITALIC(pResult, pParams);
			break;
			
		case 87 :
			XLS_FONT_Get_italic(pResult, pParams);
			break;
			
		case 88 :
			XLS_FONT_RELEASE(pResult, pParams);
			break;
			
			// --- Format
			
		case 89 :
			XLS_FORMAT_Get_valign(pResult, pParams);
			break;
			
		case 90 :
			XLS_FORMAT_SET_FONT(pResult, pParams);
			break;
			
		case 91 :
			XLS_FORMAT_Get_font(pResult, pParams);
			break;
			
		case 92 :
			XLS_FORMAT_SET_NUMERIC_FORMAT(pResult, pParams);
			break;
			
		case 93 :
			XLS_FORMAT_Get_numeric_format(pResult, pParams);
			break;
			
		case 94 :
			XLS_FORMAT_SET_HALIGN(pResult, pParams);
			break;
			
		case 95 :
			XLS_FORMAT_SET_VALIGN(pResult, pParams);
			break;
			
		case 96 :
			XLS_FORMAT_SET_ORIENTATION(pResult, pParams);
			break;
			
		case 97 :
			XLS_FORMAT_SET_COLOR(pResult, pParams);
			break;
			
		case 98 :
			XLS_FORMAT_SET_FILL_STYLE(pResult, pParams);
			break;
			
		case 99 :
			XLS_FORMAT_SET_WRAP(pResult, pParams);
			break;
			
		case 100 :
			XLS_FORMAT_SET_BORDER_STYLE(pResult, pParams);
			break;
			
		case 101 :
			XLS_FORMAT_SET_LOCKED(pResult, pParams);
			break;
			
		case 102 :
			XLS_FORMAT_SET_HIDDEN(pResult, pParams);
			break;
			
		case 103 :
			XLS_FORMAT_Get_halign(pResult, pParams);
			break;
			
		case 104 :
			XLS_FORMAT_Get_orientation(pResult, pParams);
			break;
			
		case 105 :
			XLS_FORMAT_GET_COLOR_ID(pResult, pParams);
			break;
			
		case 106 :
			XLS_FORMAT_Get_fill_style(pResult, pParams);
			break;
			
		case 107 :
			XLS_FORMAT_Get_wrap(pResult, pParams);
			break;
			
		case 108 :
			XLS_FORMAT_SET_BORDER_COLOR(pResult, pParams);
			break;
			
		case 109 :
			XLS_FORMAT_Get_border_style(pResult, pParams);
			break;
			
		case 110 :
			XLS_FORMAT_Get_border_color_id(pResult, pParams);
			break;
			
		case 111 :
			XLS_FORMAT_Get_locked(pResult, pParams);
			break;
			
		case 112 :
			XLS_FORMAT_Get_hidden(pResult, pParams);
			break;
			
		case 113 :
			XLS_FORMAT_RELEASE(pResult, pParams);
			break;
			
			// --- Node
			
		case 114 :
			XLS_NODE_RELEASE(pResult, pParams);
			break;
			
	}
}

// ----------------------------------- Workbook -----------------------------------

#pragma mark -

#pragma mark Workbook

void XLS_WORKBOOK_Create(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
	
	_workbookCreate(returnValue);
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_CLEAR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1Book;
	
	Param1Book.fromParamAtIndex(pParams, 1);
	
	_workbookDelete(Param1Book);
	
}

void XLS_WORKBOOK_Save_document(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	workbook *w = _workbookGet(Param1);
	
	if(w){
#if VERSIONMAC		
		CUTF8String path;
		Param2.copyPath(&path);
		returnValue.setIntValue(w->Dump((const char *)path.c_str()));
#else
		CUTF16String path;
		Param2.copyUTF16String(&path);
		returnValue.setIntValue(w->Dump((const wchar_t *)path.c_str()));
#endif	
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_sheet(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	_worksheetCreate(_workbookGet(Param1), Param2, returnValue);
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_format(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_formatCreate(_workbookGet(Param1), returnValue);
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_font(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	_fontCreate(_workbookGet(Param1), Param2, returnValue);

	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_fn0_node(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	workbook *w = _workbookGet(Param1);
	
	if(w){
		
		expr_function_code_t functionCode = (expr_function_code_t)Param2.getIntValue();

		expression_node_factory_t& maker = w->GetFormulaFactory();
		expression_node_t *n = maker.f(functionCode);
		
		_nodeMap(n, returnValue);	
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_fn1_node(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	workbook *w = _workbookGet(Param1);
	expression_node_t *n = _nodeGet(Param3);
	
	if((w) && (n)){
		
		expr_function_code_t functionCode = (expr_function_code_t)Param2.getIntValue();
		
		expression_node_factory_t& maker = w->GetFormulaFactory();
		expression_node_t *f = maker.f(functionCode, n);
		
		_nodeMap(f, returnValue);	
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_fn2_node(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	
	workbook *w = _workbookGet(Param1);
	expression_node_t *n1 = _nodeGet(Param3);
	expression_node_t *n2 = _nodeGet(Param4);
	
	if((w) && (n1) && (n2)){
		
		expr_function_code_t functionCode = (expr_function_code_t)Param2.getIntValue();
		
		expression_node_factory_t& maker = w->GetFormulaFactory();
		expression_node_t *f = maker.f(functionCode, n1, n2);
		
		_nodeMap(f, returnValue);	
		
	}	
	
	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_area_node(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);

	workbook *w = _workbookGet(Param1);
	
	if(w){
		
		cell_t *c1 = _cellGet(Param2);
		cell_t *c2 = _cellGet(Param3);
		
		cell_addr_mode_t address = (cell_addr_mode_t)Param4.getIntValue();
		cell_op_class_t mode = (cell_op_class_t)Param5.getIntValue();	
		
		expression_node_factory_t& maker = w->GetFormulaFactory();
		expression_node_t *n = maker.area(*c1, *c2, address, mode);
		
		_nodeMap(n, returnValue);	
		
	}

	returnValue.setReturn(pResult);
}

void XLS_WORKBOOK_Create_cell_node(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	workbook *w = _workbookGet(Param1);
	
	if(w){
		
		cell_t *c = _cellGet(Param2);
		
		cell_addr_mode_t address = (cell_addr_mode_t)Param3.getIntValue();
		cell_op_class_t mode = (cell_op_class_t)Param4.getIntValue();	
		
		expression_node_factory_t& maker = w->GetFormulaFactory();
		expression_node_t *n = maker.cell(*c, address, mode);
		
		_nodeMap(n, returnValue);	
		
	}

	returnValue.setReturn(pResult);
}

// ----------------------------------- Worksheet ----------------------------------

#pragma mark Worksheet

void XLS_WORKSHEET_Set_cell_text(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_TEXT Param5;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);

	cell_t *c;
	
	if(s){
		
		if(Param5.getUTF16Length()){
			
			CUTF8String label;
			Param5.copyUTF8String(&label);
			
			c = s->label(Param2.getIntValue(), 
						 Param3.getIntValue(),	
						 (const char *)label.c_str(), f);			
		}else{
			c = s->blank(Param2.getIntValue(), 
						 Param3.getIntValue(), f);			
		}
		
		_cellMap(c, returnValue);

	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Set_cell_bool(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);
	
	cell_t *c;
	
	if(s){
		
		c = s->boolean(Param2.getIntValue(), 
					   Param3.getIntValue(),	
					   Param5.getIntValue(), f);		
		
		_cellMap(c, returnValue);
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Set_cell_real(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_REAL Param5;
	C_LONGINT Param6;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);
	
	cell_t *c;
	
	if(s){
		
		c = s->number(Param2.getIntValue(), 
					  Param3.getIntValue(),	
					  Param5.getDoubleValue(), 
					  f);	
		
		if(Param6.getIntValue())
		{
			c->format((format_number_t)Param6.getIntValue());
		}
		
		_cellMap(c, returnValue);
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Set_cell_note(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);
	
	cell_t *c;
	
	if(s){
		
		CUTF8String remark;
		CUTF8String author;
		
		Param5.copyUTF8String(&remark);
		Param6.copyUTF8String(&author);
		
		c = s->note(Param2.getIntValue(), 
					Param3.getIntValue(),	
					(const char *)remark.c_str(), (const char *)author.c_str(), f);			
		
		
		_cellMap(c, returnValue);
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Set_cell_link(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);	
	
	cell_t *c;
	
	if(s){
		
		if(Param5.getUTF16Length() && Param6.getUTF16Length()){
		
			CUTF8String url;
			CUTF8String mark;
			
			Param5.copyUTF8String(&url);
			Param6.copyUTF8String(&mark);
			
			c = s->label(Param2.getIntValue(), 
						 Param3.getIntValue(),	
						 (const char *)url.c_str(), f);	
			
			s->hyperLink(c, (const char *)url.c_str(), (const char *)mark.c_str());
			
		}else{
			c = s->blank(Param2.getIntValue(), 
						 Param3.getIntValue(), f);			
		}	
		
		_cellMap(c, returnValue);
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Set_cell_fn(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	
	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);	
	expression_node_t *n = _nodeGet(Param5);
	
	cell_t *c;
	
	if((s) && (n)){
		
		c = s->formula(Param2.getIntValue(), 
					   Param3.getIntValue(),	
					   n, true, f);	
		
		_cellMap(c, returnValue);
		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_SET_ROW_HEIGHT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);
	
	if(s){
		
		s->rowheight(Param2.getIntValue(), 
					 Param3.getIntValue(), f);		
		
	}

}

void XLS_WORKSHEET_SET_COL_WIDTH(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	worksheet *s = _worksheetGet(Param1);
	xf_t *f = _formatGet(Param4);
	
	if(s){
		
		s->colwidth(Param2.getIntValue(), 
					Param3.getIntValue(), f);
		
	}

}

void XLS_WORKSHEET_MERGE_CELLS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);

	worksheet *s = _worksheetGet(Param1);
	
	if(s){
		
		s->merge(Param2.getIntValue(), 
				 Param3.getIntValue(),
				 Param4.getIntValue(),
				 Param5.getIntValue());

	}

}

void XLS_WORKSHEET_Get_cell_range(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);

	worksheet *s = _worksheetGet(Param1);
	
	if(s){
		
		range *r = s->rangegroup(Param2.getIntValue(), 
								 Param3.getIntValue(),
								 Param4.getIntValue(),
								 Param5.getIntValue());
		
		_rangeMap(r, returnValue);
		
	}

	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_Get_cell(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	worksheet *s = _worksheetGet(Param1);
	
	if(s){
		
		cell_t *c = s->FindCellOrMakeBlank(Param2.getIntValue(), 
										   Param3.getIntValue());
		
		_cellMap(c, returnValue);
		
	}	

	returnValue.setReturn(pResult);
}

void XLS_WORKSHEET_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_worksheetRelease(Param1);
}

// ------------------------------------- Cell -------------------------------------

#pragma mark Cell

void XLS_CELL_SET_FONT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	font_t *font = _fontGet(Param2);
	
	if((c) && (font)){
		c->font(font);
	}

}

void XLS_CELL_SET_FORMAT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	xf_t *f = _formatGet(Param2);
	
	if((c) && (f)){
		
		c->SetXF(f);
		
	}
	
}

void XLS_CELL_Get_row(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	cell_t *c = _cellGet(Param1);

	if(c){
		returnValue.setIntValue(c->GetRow());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_CELL_Get_col(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	cell_t *c = _cellGet(Param1);

	if(c){
		returnValue.setIntValue(c->GetCol());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_CELL_SET_NUMERIC_FORMAT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);

	if(c){
		c->format((format_number_t)Param2.getIntValue());
	}
	
}

void XLS_CELL_Get_format(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		
		xf_t *f = c->GetXF();
		
		std::map<uint32_t, xlslib_core::xf_t*>::iterator pos;
		
		for (pos = _formats.begin() ; pos != _formats.end(); pos++){
			
			if(pos->second == f){
				returnValue.setIntValue(pos->first);
				break;
			}
		}
		
	}

	returnValue.setReturn(pResult);
}

void XLS_CELL_SET_ITALIC(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);

	if(c){
		c->fontitalic(Param2.getIntValue());
	}
	
}

void XLS_CELL_SET_STRIKEOUT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);

	if(c){
		c->fontstrikeout(Param2.getIntValue());
	}
	
}

void XLS_CELL_SET_SHADOW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fontshadow(Param2.getIntValue());
	}

}

void XLS_CELL_SET_SCRIPT_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fontscript((script_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_UNDERLINE_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fontunderline((underline_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_BOLDNESS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fontbold((boldness_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_FONT_HEIGHT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fontheight(Param2.getIntValue());
	}

}

void XLS_CELL_SET_FONT_NAME(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		
		CUTF8String s;
		Param2.copyUTF8String(&s);
		
		std::string name = std::string((char *)s.c_str());
		
	//	if(CGlobalRecords::IsASCII(name)){
		
			c->fontname(name);
			
	//	}
		
	}	

}

void XLS_CELL_SET_HIDDEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->hidden(Param2.getIntValue());
	}

}

void XLS_CELL_SET_LOCKED(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);

	if(c){
		c->locked(Param2.getIntValue());
	}
	
}

void XLS_CELL_SET_BORDER_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	cell_t *c = _cellGet(Param1);

	if(c){
		c->borderstyle((border_side_t)Param2.getIntValue(),
					   (border_style_t)Param3.getIntValue());			
	}
	
}

void XLS_CELL_SET_WRAP(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->wrap(Param2.getIntValue());
	}

}

void XLS_CELL_SET_HALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->halign((halign_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_VALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->valign((valign_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_ORIENTATION(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->orientation((txtori_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fillbgcolor((color_name_t)Param2.getIntValue());
		c->fillfgcolor((color_name_t)Param3.getIntValue());
	}

}

void XLS_CELL_SET_FILL_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->fillstyle((fill_option_t)Param2.getIntValue());
	}

}

void XLS_CELL_SET_BORDER_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	cell_t *c = _cellGet(Param1);
	
	if(c){
		c->bordercolor((border_side_t)Param2.getIntValue(),
					   (color_name_t)Param3.getIntValue());		
	}

}

void XLS_CELL_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_cellRelease(Param1);
}

// ------------------------------------- Range ------------------------------------

#pragma mark Range

void XLS_RANGE_SET_FONT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	font_t *f = _fontGet(Param2);
	
	
	if((r) && (f)){
		
		r->font(f);
		
	}

}

void XLS_RANGE_SET_NUMERIC_FORMAT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->format((format_number_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_ITALIC(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontitalic(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_STRIKEOUT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontstrikeout(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_SHADOW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontshadow(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_SCRIPT_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontscript((script_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_UNDERLINE_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontunderline((underline_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_BOLDNESS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontbold((boldness_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_FONT_HEIGHT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fontheight(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_FONT_NAME(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
	
		CUTF8String s;
		Param2.copyUTF8String(&s);
		std::string name = std::string((char *)s.c_str());	
		
	//	if(CGlobalRecords::IsASCII(name)){
		
			r->fontname(name);
			
	//	}

	}

}

void XLS_RANGE_SET_HIDDEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->hidden(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_LOCKED(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->locked(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_BORDER_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->borderstyle((border_side_t)Param2.getIntValue(),
					   (border_style_t)Param3.getIntValue());		
	}	

}

void XLS_RANGE_SET_WRAP(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->wrap(Param2.getIntValue());
	}

}

void XLS_RANGE_SET_HALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->halign((halign_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_VALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->valign((valign_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_ORIENTATION(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->orientation((txtori_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fillbgcolor((color_name_t)Param2.getIntValue());
		r->fillfgcolor((color_name_t)Param3.getIntValue());		
	}

}

void XLS_RANGE_SET_FILL_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	range *r = _rangeGet(Param1);
	
	if(r){
		r->fillstyle((fill_option_t)Param2.getIntValue());
	}

}

void XLS_RANGE_SET_BORDER_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	range *r = _rangeGet(Param1);

	if(r){
		r->bordercolor((border_side_t)Param2.getIntValue(),
					   (color_name_t)Param3.getIntValue());		
	}
	
}

void XLS_RANGE_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_rangeRelease(Param1);
}

// ------------------------------------- Font -------------------------------------

#pragma mark Font

void XLS_FONT_SET_NAME(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);
	
	if(f){
		
		CUTF8String s;
		Param2.copyUTF8String(&s);
		
		std::string name = std::string((char *)s.c_str());	
		
	//	if(CGlobalRecords::IsASCII(name)){
		
			f->SetName(name);	
			
	//	}
		
	}	

}

void XLS_FONT_SET_HEIGHT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2height;

	Param1.fromParamAtIndex(pParams, 1);
	Param2height.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);
	
	if(f){
		f->SetHeight(Param2height.getIntValue());
	}

}

void XLS_FONT_SET_BOLDNESS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);
	
	if(f){
		f->SetBoldStyle((boldness_option_t)Param2.getIntValue());
	}

}

void XLS_FONT_SET_UNDERLINE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);
	
	if(f){
		f->SetUnderlineStyle((underline_option_t)Param2.getIntValue());
	}

}

void XLS_FONT_SET_SCRIPT_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);
	
	if(f){
		f->SetScriptStyle((script_option_t)Param2.getIntValue());
	}

}

void XLS_FONT_SET_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);

	if(f){
		f->SetColor((color_name_t)Param2.getIntValue());
	}
	
}

void XLS_FONT_SET_STRIKEOUT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);

	if(f){
		f->SetStrikeout(Param2.getIntValue());
	}
	
}

void XLS_FONT_SET_SHADOW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);

	if(f){
		f->SetShadow(Param2.getIntValue());
	}
	
}

void XLS_FONT_Get_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);

	if(f){
		const std::string name = f->GetName();
		returnValue.setUTF8String((const uint8_t *)name.c_str(), name.size());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_height(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);

	if(f){
		returnValue.setIntValue(f->GetHeight());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_boldness(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetBoldStyle());
	}

	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_underline(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);

	if(f){
		returnValue.setIntValue(f->GetUnderlineStyle());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_script_style(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);

	if(f){
		returnValue.setIntValue(f->GetScriptStyle());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_color_id(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);

	if(f){
		returnValue.setIntValue(f->GetColorIdx());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_strikeout(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetStrikeout());
	}

	returnValue.setReturn(pResult);
}

void XLS_FONT_Get_shadow(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetShadow());
	}

	returnValue.setReturn(pResult);
}

void XLS_FONT_SET_ITALIC(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	font_t *f = _fontGet(Param1);

	if(f){
		f->SetItalic(Param2.getIntValue());
	}
	
}

void XLS_FONT_Get_italic(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	font_t *f = _fontGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetItalic());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FONT_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_fontRelease(Param1);
}

// ------------------------------------ Format ------------------------------------

#pragma mark Format

void XLS_FORMAT_Get_valign(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetVAlign());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_SET_FONT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	font_t *font = _fontGet(Param2);
	
	if((f) && (font)){
		f->SetFont(font);
	}
	
}

void XLS_FORMAT_Get_font(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		
		font_t *font = f->GetFont();
		
		std::map<uint32_t, xlslib_core::font_t*>::iterator pos;
		
		for (pos = _fonts.begin() ; pos != _fonts.end(); pos++){
			
			if(pos->second == font){
				returnValue.setIntValue(pos->first);
				break;
			}
		}
		
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_SET_NUMERIC_FORMAT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetFormat((format_number_t)Param2.getIntValue());
	}

}

void XLS_FORMAT_Get_numeric_format(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetFormat());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_SET_HALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetHAlign((halign_option_t)Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_VALIGN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetVAlign((valign_option_t)Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_ORIENTATION(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetTxtOrientation((txtori_option_t)Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetFillBGColor((color_name_t)Param2.getIntValue());
		f->SetFillFGColor((color_name_t)Param3.getIntValue());
	}

}

void XLS_FORMAT_SET_FILL_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetFillStyle((fill_option_t)Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_WRAP(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetWrap(Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_BORDER_STYLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetBorderStyle((border_side_t)Param2.getIntValue(),
						  (border_style_t)Param3.getIntValue());
	}

}

void XLS_FORMAT_SET_LOCKED(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetLocked(Param2.getIntValue());
	}

}

void XLS_FORMAT_SET_HIDDEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);

	if(f){
		f->SetHidden(Param2.getIntValue());
	}

}

void XLS_FORMAT_Get_halign(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetHAlign());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_Get_orientation(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetTxtOrientation());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_GET_COLOR_ID(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		Param2.setIntValue(f->GetFillBGColorIdx());
		Param3.setIntValue(f->GetFillFGColorIdx());
	}

	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

void XLS_FORMAT_Get_fill_style(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetFillStyle());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_Get_wrap(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->IsWrap());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_SET_BORDER_COLOR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		f->SetBorderColor((border_side_t)Param2.getIntValue(),
						  (color_name_t)Param3.getIntValue());		
	}

}

void XLS_FORMAT_Get_border_style(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetBorderStyle((border_side_t)Param2.getIntValue()));
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_Get_border_color_id(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->GetBorderColorIdx((border_side_t)Param2.getIntValue()));
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FORMAT_Get_locked(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->IsLocked());
	}

	returnValue.setReturn(pResult);
}

void XLS_FORMAT_Get_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	xf_t *f = _formatGet(Param1);
	
	if(f){
		returnValue.setIntValue(f->IsHidden());
	}
	
	returnValue.setReturn(pResult);
}

void XLS_FORMAT_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_formatRelease(Param1);
}

// ------------------------------------- Node -------------------------------------

#pragma mark Node

void XLS_NODE_RELEASE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	_rangeRelease(Param1);
}
